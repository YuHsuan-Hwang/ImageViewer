// source: imageviewer.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ImageViewer.ChannelRequest', null, global);
goog.exportSymbol('proto.ImageViewer.ChannelResponse', null, global);
goog.exportSymbol('proto.ImageViewer.ChannelResponse.OneRow', null, global);
goog.exportSymbol('proto.ImageViewer.EventType', null, global);
goog.exportSymbol('proto.ImageViewer.HistRequest', null, global);
goog.exportSymbol('proto.ImageViewer.HistResponse', null, global);
goog.exportSymbol('proto.ImageViewer.InitDisplayRequest', null, global);
goog.exportSymbol('proto.ImageViewer.InitDisplayResponse', null, global);
goog.exportSymbol('proto.ImageViewer.InitDisplayResponse.OneRow', null, global);
goog.exportSymbol('proto.ImageViewer.ProfileRequest', null, global);
goog.exportSymbol('proto.ImageViewer.ProfileResponse', null, global);
goog.exportSymbol('proto.ImageViewer.ZoomRequest', null, global);
goog.exportSymbol('proto.ImageViewer.ZoomResponse', null, global);
goog.exportSymbol('proto.ImageViewer.ZoomResponse.OneRow', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ImageViewer.InitDisplayRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ImageViewer.InitDisplayRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ImageViewer.InitDisplayRequest.displayName = 'proto.ImageViewer.InitDisplayRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ImageViewer.ZoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ImageViewer.ZoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ImageViewer.ZoomRequest.displayName = 'proto.ImageViewer.ZoomRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ImageViewer.ProfileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ImageViewer.ProfileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ImageViewer.ProfileRequest.displayName = 'proto.ImageViewer.ProfileRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ImageViewer.ChannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ImageViewer.ChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ImageViewer.ChannelRequest.displayName = 'proto.ImageViewer.ChannelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ImageViewer.HistRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ImageViewer.HistRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ImageViewer.HistRequest.displayName = 'proto.ImageViewer.HistRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ImageViewer.InitDisplayResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ImageViewer.InitDisplayResponse.repeatedFields_, null);
};
goog.inherits(proto.ImageViewer.InitDisplayResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ImageViewer.InitDisplayResponse.displayName = 'proto.ImageViewer.InitDisplayResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ImageViewer.InitDisplayResponse.OneRow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ImageViewer.InitDisplayResponse.OneRow.repeatedFields_, null);
};
goog.inherits(proto.ImageViewer.InitDisplayResponse.OneRow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ImageViewer.InitDisplayResponse.OneRow.displayName = 'proto.ImageViewer.InitDisplayResponse.OneRow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ImageViewer.ZoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ImageViewer.ZoomResponse.repeatedFields_, null);
};
goog.inherits(proto.ImageViewer.ZoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ImageViewer.ZoomResponse.displayName = 'proto.ImageViewer.ZoomResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ImageViewer.ZoomResponse.OneRow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ImageViewer.ZoomResponse.OneRow.repeatedFields_, null);
};
goog.inherits(proto.ImageViewer.ZoomResponse.OneRow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ImageViewer.ZoomResponse.OneRow.displayName = 'proto.ImageViewer.ZoomResponse.OneRow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ImageViewer.ProfileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ImageViewer.ProfileResponse.repeatedFields_, null);
};
goog.inherits(proto.ImageViewer.ProfileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ImageViewer.ProfileResponse.displayName = 'proto.ImageViewer.ProfileResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ImageViewer.ChannelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ImageViewer.ChannelResponse.repeatedFields_, null);
};
goog.inherits(proto.ImageViewer.ChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ImageViewer.ChannelResponse.displayName = 'proto.ImageViewer.ChannelResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ImageViewer.ChannelResponse.OneRow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ImageViewer.ChannelResponse.OneRow.repeatedFields_, null);
};
goog.inherits(proto.ImageViewer.ChannelResponse.OneRow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ImageViewer.ChannelResponse.OneRow.displayName = 'proto.ImageViewer.ChannelResponse.OneRow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ImageViewer.HistResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ImageViewer.HistResponse.repeatedFields_, null);
};
goog.inherits(proto.ImageViewer.HistResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ImageViewer.HistResponse.displayName = 'proto.ImageViewer.HistResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ImageViewer.InitDisplayRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ImageViewer.InitDisplayRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ImageViewer.InitDisplayRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.InitDisplayRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sendStartTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    xScreensizeInPx: jspb.Message.getFieldWithDefault(msg, 2, 0),
    yScreensizeInPx: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ImageViewer.InitDisplayRequest}
 */
proto.ImageViewer.InitDisplayRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ImageViewer.InitDisplayRequest;
  return proto.ImageViewer.InitDisplayRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ImageViewer.InitDisplayRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ImageViewer.InitDisplayRequest}
 */
proto.ImageViewer.InitDisplayRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setXScreensizeInPx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYScreensizeInPx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ImageViewer.InitDisplayRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ImageViewer.InitDisplayRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ImageViewer.InitDisplayRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.InitDisplayRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSendStartTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getXScreensizeInPx();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getYScreensizeInPx();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int64 send_start_time = 1;
 * @return {number}
 */
proto.ImageViewer.InitDisplayRequest.prototype.getSendStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.InitDisplayRequest} returns this
 */
proto.ImageViewer.InitDisplayRequest.prototype.setSendStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 x_screensize_in_px = 2;
 * @return {number}
 */
proto.ImageViewer.InitDisplayRequest.prototype.getXScreensizeInPx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.InitDisplayRequest} returns this
 */
proto.ImageViewer.InitDisplayRequest.prototype.setXScreensizeInPx = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 y_screensize_in_px = 3;
 * @return {number}
 */
proto.ImageViewer.InitDisplayRequest.prototype.getYScreensizeInPx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.InitDisplayRequest} returns this
 */
proto.ImageViewer.InitDisplayRequest.prototype.setYScreensizeInPx = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ImageViewer.ZoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ImageViewer.ZoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ImageViewer.ZoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.ZoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sendStartTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    xmin: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ymin: jspb.Message.getFieldWithDefault(msg, 4, 0),
    width: jspb.Message.getFieldWithDefault(msg, 5, 0),
    height: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ImageViewer.ZoomRequest}
 */
proto.ImageViewer.ZoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ImageViewer.ZoomRequest;
  return proto.ImageViewer.ZoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ImageViewer.ZoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ImageViewer.ZoomRequest}
 */
proto.ImageViewer.ZoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setXmin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYmin(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ImageViewer.ZoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ImageViewer.ZoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ImageViewer.ZoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.ZoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSendStartTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getXmin();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getYmin();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional int64 send_start_time = 1;
 * @return {number}
 */
proto.ImageViewer.ZoomRequest.prototype.getSendStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ZoomRequest} returns this
 */
proto.ImageViewer.ZoomRequest.prototype.setSendStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 channel = 2;
 * @return {number}
 */
proto.ImageViewer.ZoomRequest.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ZoomRequest} returns this
 */
proto.ImageViewer.ZoomRequest.prototype.setChannel = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 xmin = 3;
 * @return {number}
 */
proto.ImageViewer.ZoomRequest.prototype.getXmin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ZoomRequest} returns this
 */
proto.ImageViewer.ZoomRequest.prototype.setXmin = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 ymin = 4;
 * @return {number}
 */
proto.ImageViewer.ZoomRequest.prototype.getYmin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ZoomRequest} returns this
 */
proto.ImageViewer.ZoomRequest.prototype.setYmin = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 width = 5;
 * @return {number}
 */
proto.ImageViewer.ZoomRequest.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ZoomRequest} returns this
 */
proto.ImageViewer.ZoomRequest.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 height = 6;
 * @return {number}
 */
proto.ImageViewer.ZoomRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ZoomRequest} returns this
 */
proto.ImageViewer.ZoomRequest.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ImageViewer.ProfileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ImageViewer.ProfileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ImageViewer.ProfileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.ProfileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sendStartTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    positionX: jspb.Message.getFieldWithDefault(msg, 3, 0),
    positionY: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ImageViewer.ProfileRequest}
 */
proto.ImageViewer.ProfileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ImageViewer.ProfileRequest;
  return proto.ImageViewer.ProfileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ImageViewer.ProfileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ImageViewer.ProfileRequest}
 */
proto.ImageViewer.ProfileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPositionX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPositionY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ImageViewer.ProfileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ImageViewer.ProfileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ImageViewer.ProfileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.ProfileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSendStartTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPositionX();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPositionY();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int64 send_start_time = 1;
 * @return {number}
 */
proto.ImageViewer.ProfileRequest.prototype.getSendStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ProfileRequest} returns this
 */
proto.ImageViewer.ProfileRequest.prototype.setSendStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 channel = 2;
 * @return {number}
 */
proto.ImageViewer.ProfileRequest.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ProfileRequest} returns this
 */
proto.ImageViewer.ProfileRequest.prototype.setChannel = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 position_x = 3;
 * @return {number}
 */
proto.ImageViewer.ProfileRequest.prototype.getPositionX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ProfileRequest} returns this
 */
proto.ImageViewer.ProfileRequest.prototype.setPositionX = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 position_y = 4;
 * @return {number}
 */
proto.ImageViewer.ProfileRequest.prototype.getPositionY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ProfileRequest} returns this
 */
proto.ImageViewer.ProfileRequest.prototype.setPositionY = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ImageViewer.ChannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ImageViewer.ChannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ImageViewer.ChannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.ChannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sendStartTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ImageViewer.ChannelRequest}
 */
proto.ImageViewer.ChannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ImageViewer.ChannelRequest;
  return proto.ImageViewer.ChannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ImageViewer.ChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ImageViewer.ChannelRequest}
 */
proto.ImageViewer.ChannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ImageViewer.ChannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ImageViewer.ChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ImageViewer.ChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.ChannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSendStartTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 send_start_time = 1;
 * @return {number}
 */
proto.ImageViewer.ChannelRequest.prototype.getSendStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ChannelRequest} returns this
 */
proto.ImageViewer.ChannelRequest.prototype.setSendStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 channel = 2;
 * @return {number}
 */
proto.ImageViewer.ChannelRequest.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ChannelRequest} returns this
 */
proto.ImageViewer.ChannelRequest.prototype.setChannel = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ImageViewer.HistRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ImageViewer.HistRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ImageViewer.HistRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.HistRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sendStartTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    histMode: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ImageViewer.HistRequest}
 */
proto.ImageViewer.HistRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ImageViewer.HistRequest;
  return proto.ImageViewer.HistRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ImageViewer.HistRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ImageViewer.HistRequest}
 */
proto.ImageViewer.HistRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHistMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ImageViewer.HistRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ImageViewer.HistRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ImageViewer.HistRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.HistRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSendStartTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getHistMode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 send_start_time = 1;
 * @return {number}
 */
proto.ImageViewer.HistRequest.prototype.getSendStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.HistRequest} returns this
 */
proto.ImageViewer.HistRequest.prototype.setSendStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 hist_mode = 2;
 * @return {number}
 */
proto.ImageViewer.HistRequest.prototype.getHistMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.HistRequest} returns this
 */
proto.ImageViewer.HistRequest.prototype.setHistMode = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ImageViewer.InitDisplayResponse.repeatedFields_ = [9,18,19];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ImageViewer.InitDisplayResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ImageViewer.InitDisplayResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ImageViewer.InitDisplayResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.InitDisplayResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskStartTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sendStartTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    filename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    origWidth: jspb.Message.getFieldWithDefault(msg, 4, 0),
    origHeight: jspb.Message.getFieldWithDefault(msg, 5, 0),
    channelNum: jspb.Message.getFieldWithDefault(msg, 6, 0),
    imageDataList: jspb.Message.toObjectList(msg.getImageDataList(),
    proto.ImageViewer.InitDisplayResponse.OneRow.toObject, includeInstance),
    imageWidth: jspb.Message.getFieldWithDefault(msg, 10, 0),
    imageHeight: jspb.Message.getFieldWithDefault(msg, 11, 0),
    origXCoorMin: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    origXCoorDelta: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    origYCoorMin: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    origYCoorDelta: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    xRebinRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0),
    yRebinRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    numbersList: (f = jspb.Message.getRepeatedField(msg, 18)) == null ? undefined : f,
    binsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 19)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ImageViewer.InitDisplayResponse}
 */
proto.ImageViewer.InitDisplayResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ImageViewer.InitDisplayResponse;
  return proto.ImageViewer.InitDisplayResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ImageViewer.InitDisplayResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ImageViewer.InitDisplayResponse}
 */
proto.ImageViewer.InitDisplayResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTaskStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendStartTime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrigWidth(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrigHeight(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannelNum(value);
      break;
    case 9:
      var value = new proto.ImageViewer.InitDisplayResponse.OneRow;
      reader.readMessage(value,proto.ImageViewer.InitDisplayResponse.OneRow.deserializeBinaryFromReader);
      msg.addImageData(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImageWidth(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImageHeight(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOrigXCoorMin(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOrigXCoorDelta(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOrigYCoorMin(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOrigYCoorDelta(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setXRebinRatio(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYRebinRatio(value);
      break;
    case 18:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addNumbers(values[i]);
      }
      break;
    case 19:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBins(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ImageViewer.InitDisplayResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ImageViewer.InitDisplayResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ImageViewer.InitDisplayResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.InitDisplayResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskStartTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSendStartTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrigWidth();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getOrigHeight();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getChannelNum();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getImageDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.ImageViewer.InitDisplayResponse.OneRow.serializeBinaryToWriter
    );
  }
  f = message.getImageWidth();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getImageHeight();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getOrigXCoorMin();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getOrigXCoorDelta();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getOrigYCoorMin();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getOrigYCoorDelta();
  if (f !== 0.0) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = message.getXRebinRatio();
  if (f !== 0.0) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = message.getYRebinRatio();
  if (f !== 0.0) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = message.getNumbersList();
  if (f.length > 0) {
    writer.writePackedInt64(
      18,
      f
    );
  }
  f = message.getBinsList();
  if (f.length > 0) {
    writer.writePackedFloat(
      19,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ImageViewer.InitDisplayResponse.OneRow.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ImageViewer.InitDisplayResponse.OneRow.prototype.toObject = function(opt_includeInstance) {
  return proto.ImageViewer.InitDisplayResponse.OneRow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ImageViewer.InitDisplayResponse.OneRow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.InitDisplayResponse.OneRow.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointDataList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ImageViewer.InitDisplayResponse.OneRow}
 */
proto.ImageViewer.InitDisplayResponse.OneRow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ImageViewer.InitDisplayResponse.OneRow;
  return proto.ImageViewer.InitDisplayResponse.OneRow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ImageViewer.InitDisplayResponse.OneRow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ImageViewer.InitDisplayResponse.OneRow}
 */
proto.ImageViewer.InitDisplayResponse.OneRow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPointData(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ImageViewer.InitDisplayResponse.OneRow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ImageViewer.InitDisplayResponse.OneRow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ImageViewer.InitDisplayResponse.OneRow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.InitDisplayResponse.OneRow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointDataList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float point_data = 1;
 * @return {!Array<number>}
 */
proto.ImageViewer.InitDisplayResponse.OneRow.prototype.getPointDataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ImageViewer.InitDisplayResponse.OneRow} returns this
 */
proto.ImageViewer.InitDisplayResponse.OneRow.prototype.setPointDataList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ImageViewer.InitDisplayResponse.OneRow} returns this
 */
proto.ImageViewer.InitDisplayResponse.OneRow.prototype.addPointData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ImageViewer.InitDisplayResponse.OneRow} returns this
 */
proto.ImageViewer.InitDisplayResponse.OneRow.prototype.clearPointDataList = function() {
  return this.setPointDataList([]);
};


/**
 * optional int64 task_start_time = 1;
 * @return {number}
 */
proto.ImageViewer.InitDisplayResponse.prototype.getTaskStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.setTaskStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 send_start_time = 2;
 * @return {number}
 */
proto.ImageViewer.InitDisplayResponse.prototype.getSendStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.setSendStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string filename = 3;
 * @return {string}
 */
proto.ImageViewer.InitDisplayResponse.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.setFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 orig_width = 4;
 * @return {number}
 */
proto.ImageViewer.InitDisplayResponse.prototype.getOrigWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.setOrigWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 orig_height = 5;
 * @return {number}
 */
proto.ImageViewer.InitDisplayResponse.prototype.getOrigHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.setOrigHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 channel_num = 6;
 * @return {number}
 */
proto.ImageViewer.InitDisplayResponse.prototype.getChannelNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.setChannelNum = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated OneRow image_data = 9;
 * @return {!Array<!proto.ImageViewer.InitDisplayResponse.OneRow>}
 */
proto.ImageViewer.InitDisplayResponse.prototype.getImageDataList = function() {
  return /** @type{!Array<!proto.ImageViewer.InitDisplayResponse.OneRow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ImageViewer.InitDisplayResponse.OneRow, 9));
};


/**
 * @param {!Array<!proto.ImageViewer.InitDisplayResponse.OneRow>} value
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
*/
proto.ImageViewer.InitDisplayResponse.prototype.setImageDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.ImageViewer.InitDisplayResponse.OneRow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ImageViewer.InitDisplayResponse.OneRow}
 */
proto.ImageViewer.InitDisplayResponse.prototype.addImageData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.ImageViewer.InitDisplayResponse.OneRow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.clearImageDataList = function() {
  return this.setImageDataList([]);
};


/**
 * optional int32 image_width = 10;
 * @return {number}
 */
proto.ImageViewer.InitDisplayResponse.prototype.getImageWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.setImageWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 image_height = 11;
 * @return {number}
 */
proto.ImageViewer.InitDisplayResponse.prototype.getImageHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.setImageHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional float orig_x_coor_min = 12;
 * @return {number}
 */
proto.ImageViewer.InitDisplayResponse.prototype.getOrigXCoorMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.setOrigXCoorMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float orig_x_coor_delta = 13;
 * @return {number}
 */
proto.ImageViewer.InitDisplayResponse.prototype.getOrigXCoorDelta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.setOrigXCoorDelta = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional float orig_y_coor_min = 14;
 * @return {number}
 */
proto.ImageViewer.InitDisplayResponse.prototype.getOrigYCoorMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.setOrigYCoorMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional float orig_y_coor_delta = 15;
 * @return {number}
 */
proto.ImageViewer.InitDisplayResponse.prototype.getOrigYCoorDelta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.setOrigYCoorDelta = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional float x_rebin_ratio = 16;
 * @return {number}
 */
proto.ImageViewer.InitDisplayResponse.prototype.getXRebinRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.setXRebinRatio = function(value) {
  return jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional float y_rebin_ratio = 17;
 * @return {number}
 */
proto.ImageViewer.InitDisplayResponse.prototype.getYRebinRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.setYRebinRatio = function(value) {
  return jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * repeated int64 numbers = 18;
 * @return {!Array<number>}
 */
proto.ImageViewer.InitDisplayResponse.prototype.getNumbersList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 18));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.setNumbersList = function(value) {
  return jspb.Message.setField(this, 18, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.addNumbers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 18, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.clearNumbersList = function() {
  return this.setNumbersList([]);
};


/**
 * repeated float bins = 19;
 * @return {!Array<number>}
 */
proto.ImageViewer.InitDisplayResponse.prototype.getBinsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 19));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.setBinsList = function(value) {
  return jspb.Message.setField(this, 19, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.addBins = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 19, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ImageViewer.InitDisplayResponse} returns this
 */
proto.ImageViewer.InitDisplayResponse.prototype.clearBinsList = function() {
  return this.setBinsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ImageViewer.ZoomResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ImageViewer.ZoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ImageViewer.ZoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ImageViewer.ZoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.ZoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskStartTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sendStartTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    imageDataList: jspb.Message.toObjectList(msg.getImageDataList(),
    proto.ImageViewer.ZoomResponse.OneRow.toObject, includeInstance),
    channel: jspb.Message.getFieldWithDefault(msg, 4, 0),
    imageWidth: jspb.Message.getFieldWithDefault(msg, 5, 0),
    imageHeight: jspb.Message.getFieldWithDefault(msg, 6, 0),
    xRebinRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    yRebinRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ImageViewer.ZoomResponse}
 */
proto.ImageViewer.ZoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ImageViewer.ZoomResponse;
  return proto.ImageViewer.ZoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ImageViewer.ZoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ImageViewer.ZoomResponse}
 */
proto.ImageViewer.ZoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTaskStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendStartTime(value);
      break;
    case 3:
      var value = new proto.ImageViewer.ZoomResponse.OneRow;
      reader.readMessage(value,proto.ImageViewer.ZoomResponse.OneRow.deserializeBinaryFromReader);
      msg.addImageData(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImageWidth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImageHeight(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setXRebinRatio(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYRebinRatio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ImageViewer.ZoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ImageViewer.ZoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ImageViewer.ZoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.ZoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskStartTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSendStartTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getImageDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ImageViewer.ZoomResponse.OneRow.serializeBinaryToWriter
    );
  }
  f = message.getChannel();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getImageWidth();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getImageHeight();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getXRebinRatio();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getYRebinRatio();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ImageViewer.ZoomResponse.OneRow.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ImageViewer.ZoomResponse.OneRow.prototype.toObject = function(opt_includeInstance) {
  return proto.ImageViewer.ZoomResponse.OneRow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ImageViewer.ZoomResponse.OneRow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.ZoomResponse.OneRow.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointDataList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ImageViewer.ZoomResponse.OneRow}
 */
proto.ImageViewer.ZoomResponse.OneRow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ImageViewer.ZoomResponse.OneRow;
  return proto.ImageViewer.ZoomResponse.OneRow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ImageViewer.ZoomResponse.OneRow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ImageViewer.ZoomResponse.OneRow}
 */
proto.ImageViewer.ZoomResponse.OneRow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPointData(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ImageViewer.ZoomResponse.OneRow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ImageViewer.ZoomResponse.OneRow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ImageViewer.ZoomResponse.OneRow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.ZoomResponse.OneRow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointDataList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float point_data = 1;
 * @return {!Array<number>}
 */
proto.ImageViewer.ZoomResponse.OneRow.prototype.getPointDataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ImageViewer.ZoomResponse.OneRow} returns this
 */
proto.ImageViewer.ZoomResponse.OneRow.prototype.setPointDataList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ImageViewer.ZoomResponse.OneRow} returns this
 */
proto.ImageViewer.ZoomResponse.OneRow.prototype.addPointData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ImageViewer.ZoomResponse.OneRow} returns this
 */
proto.ImageViewer.ZoomResponse.OneRow.prototype.clearPointDataList = function() {
  return this.setPointDataList([]);
};


/**
 * optional int64 task_start_time = 1;
 * @return {number}
 */
proto.ImageViewer.ZoomResponse.prototype.getTaskStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ZoomResponse} returns this
 */
proto.ImageViewer.ZoomResponse.prototype.setTaskStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 send_start_time = 2;
 * @return {number}
 */
proto.ImageViewer.ZoomResponse.prototype.getSendStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ZoomResponse} returns this
 */
proto.ImageViewer.ZoomResponse.prototype.setSendStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated OneRow image_data = 3;
 * @return {!Array<!proto.ImageViewer.ZoomResponse.OneRow>}
 */
proto.ImageViewer.ZoomResponse.prototype.getImageDataList = function() {
  return /** @type{!Array<!proto.ImageViewer.ZoomResponse.OneRow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ImageViewer.ZoomResponse.OneRow, 3));
};


/**
 * @param {!Array<!proto.ImageViewer.ZoomResponse.OneRow>} value
 * @return {!proto.ImageViewer.ZoomResponse} returns this
*/
proto.ImageViewer.ZoomResponse.prototype.setImageDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ImageViewer.ZoomResponse.OneRow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ImageViewer.ZoomResponse.OneRow}
 */
proto.ImageViewer.ZoomResponse.prototype.addImageData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ImageViewer.ZoomResponse.OneRow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ImageViewer.ZoomResponse} returns this
 */
proto.ImageViewer.ZoomResponse.prototype.clearImageDataList = function() {
  return this.setImageDataList([]);
};


/**
 * optional int32 channel = 4;
 * @return {number}
 */
proto.ImageViewer.ZoomResponse.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ZoomResponse} returns this
 */
proto.ImageViewer.ZoomResponse.prototype.setChannel = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 image_width = 5;
 * @return {number}
 */
proto.ImageViewer.ZoomResponse.prototype.getImageWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ZoomResponse} returns this
 */
proto.ImageViewer.ZoomResponse.prototype.setImageWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 image_height = 6;
 * @return {number}
 */
proto.ImageViewer.ZoomResponse.prototype.getImageHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ZoomResponse} returns this
 */
proto.ImageViewer.ZoomResponse.prototype.setImageHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional float x_rebin_ratio = 7;
 * @return {number}
 */
proto.ImageViewer.ZoomResponse.prototype.getXRebinRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ZoomResponse} returns this
 */
proto.ImageViewer.ZoomResponse.prototype.setXRebinRatio = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float y_rebin_ratio = 8;
 * @return {number}
 */
proto.ImageViewer.ZoomResponse.prototype.getYRebinRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ZoomResponse} returns this
 */
proto.ImageViewer.ZoomResponse.prototype.setYRebinRatio = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ImageViewer.ProfileResponse.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ImageViewer.ProfileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ImageViewer.ProfileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ImageViewer.ProfileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.ProfileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskStartTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sendStartTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    profileXList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f,
    profileYList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 4)) == null ? undefined : f,
    profileZList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ImageViewer.ProfileResponse}
 */
proto.ImageViewer.ProfileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ImageViewer.ProfileResponse;
  return proto.ImageViewer.ProfileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ImageViewer.ProfileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ImageViewer.ProfileResponse}
 */
proto.ImageViewer.ProfileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTaskStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendStartTime(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addProfileX(values[i]);
      }
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addProfileY(values[i]);
      }
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addProfileZ(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ImageViewer.ProfileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ImageViewer.ProfileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ImageViewer.ProfileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.ProfileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskStartTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSendStartTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getProfileXList();
  if (f.length > 0) {
    writer.writePackedFloat(
      3,
      f
    );
  }
  f = message.getProfileYList();
  if (f.length > 0) {
    writer.writePackedFloat(
      4,
      f
    );
  }
  f = message.getProfileZList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
};


/**
 * optional int64 task_start_time = 1;
 * @return {number}
 */
proto.ImageViewer.ProfileResponse.prototype.getTaskStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ProfileResponse} returns this
 */
proto.ImageViewer.ProfileResponse.prototype.setTaskStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 send_start_time = 2;
 * @return {number}
 */
proto.ImageViewer.ProfileResponse.prototype.getSendStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ProfileResponse} returns this
 */
proto.ImageViewer.ProfileResponse.prototype.setSendStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated float profile_x = 3;
 * @return {!Array<number>}
 */
proto.ImageViewer.ProfileResponse.prototype.getProfileXList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ImageViewer.ProfileResponse} returns this
 */
proto.ImageViewer.ProfileResponse.prototype.setProfileXList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ImageViewer.ProfileResponse} returns this
 */
proto.ImageViewer.ProfileResponse.prototype.addProfileX = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ImageViewer.ProfileResponse} returns this
 */
proto.ImageViewer.ProfileResponse.prototype.clearProfileXList = function() {
  return this.setProfileXList([]);
};


/**
 * repeated float profile_y = 4;
 * @return {!Array<number>}
 */
proto.ImageViewer.ProfileResponse.prototype.getProfileYList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ImageViewer.ProfileResponse} returns this
 */
proto.ImageViewer.ProfileResponse.prototype.setProfileYList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ImageViewer.ProfileResponse} returns this
 */
proto.ImageViewer.ProfileResponse.prototype.addProfileY = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ImageViewer.ProfileResponse} returns this
 */
proto.ImageViewer.ProfileResponse.prototype.clearProfileYList = function() {
  return this.setProfileYList([]);
};


/**
 * repeated float profile_z = 5;
 * @return {!Array<number>}
 */
proto.ImageViewer.ProfileResponse.prototype.getProfileZList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ImageViewer.ProfileResponse} returns this
 */
proto.ImageViewer.ProfileResponse.prototype.setProfileZList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ImageViewer.ProfileResponse} returns this
 */
proto.ImageViewer.ProfileResponse.prototype.addProfileZ = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ImageViewer.ProfileResponse} returns this
 */
proto.ImageViewer.ProfileResponse.prototype.clearProfileZList = function() {
  return this.setProfileZList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ImageViewer.ChannelResponse.repeatedFields_ = [3,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ImageViewer.ChannelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ImageViewer.ChannelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ImageViewer.ChannelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.ChannelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskStartTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sendStartTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    imageDataList: jspb.Message.toObjectList(msg.getImageDataList(),
    proto.ImageViewer.ChannelResponse.OneRow.toObject, includeInstance),
    channel: jspb.Message.getFieldWithDefault(msg, 4, 0),
    imageWidth: jspb.Message.getFieldWithDefault(msg, 5, 0),
    imageHeight: jspb.Message.getFieldWithDefault(msg, 6, 0),
    xRebinRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    yRebinRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    numbersList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    binsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 10)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ImageViewer.ChannelResponse}
 */
proto.ImageViewer.ChannelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ImageViewer.ChannelResponse;
  return proto.ImageViewer.ChannelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ImageViewer.ChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ImageViewer.ChannelResponse}
 */
proto.ImageViewer.ChannelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTaskStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendStartTime(value);
      break;
    case 3:
      var value = new proto.ImageViewer.ChannelResponse.OneRow;
      reader.readMessage(value,proto.ImageViewer.ChannelResponse.OneRow.deserializeBinaryFromReader);
      msg.addImageData(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImageWidth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImageHeight(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setXRebinRatio(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYRebinRatio(value);
      break;
    case 9:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addNumbers(values[i]);
      }
      break;
    case 10:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBins(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ImageViewer.ChannelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ImageViewer.ChannelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ImageViewer.ChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.ChannelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskStartTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSendStartTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getImageDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ImageViewer.ChannelResponse.OneRow.serializeBinaryToWriter
    );
  }
  f = message.getChannel();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getImageWidth();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getImageHeight();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getXRebinRatio();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getYRebinRatio();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getNumbersList();
  if (f.length > 0) {
    writer.writePackedInt64(
      9,
      f
    );
  }
  f = message.getBinsList();
  if (f.length > 0) {
    writer.writePackedFloat(
      10,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ImageViewer.ChannelResponse.OneRow.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ImageViewer.ChannelResponse.OneRow.prototype.toObject = function(opt_includeInstance) {
  return proto.ImageViewer.ChannelResponse.OneRow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ImageViewer.ChannelResponse.OneRow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.ChannelResponse.OneRow.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointDataList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ImageViewer.ChannelResponse.OneRow}
 */
proto.ImageViewer.ChannelResponse.OneRow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ImageViewer.ChannelResponse.OneRow;
  return proto.ImageViewer.ChannelResponse.OneRow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ImageViewer.ChannelResponse.OneRow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ImageViewer.ChannelResponse.OneRow}
 */
proto.ImageViewer.ChannelResponse.OneRow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPointData(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ImageViewer.ChannelResponse.OneRow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ImageViewer.ChannelResponse.OneRow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ImageViewer.ChannelResponse.OneRow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.ChannelResponse.OneRow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointDataList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float point_data = 1;
 * @return {!Array<number>}
 */
proto.ImageViewer.ChannelResponse.OneRow.prototype.getPointDataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ImageViewer.ChannelResponse.OneRow} returns this
 */
proto.ImageViewer.ChannelResponse.OneRow.prototype.setPointDataList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ImageViewer.ChannelResponse.OneRow} returns this
 */
proto.ImageViewer.ChannelResponse.OneRow.prototype.addPointData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ImageViewer.ChannelResponse.OneRow} returns this
 */
proto.ImageViewer.ChannelResponse.OneRow.prototype.clearPointDataList = function() {
  return this.setPointDataList([]);
};


/**
 * optional int64 task_start_time = 1;
 * @return {number}
 */
proto.ImageViewer.ChannelResponse.prototype.getTaskStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ChannelResponse} returns this
 */
proto.ImageViewer.ChannelResponse.prototype.setTaskStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 send_start_time = 2;
 * @return {number}
 */
proto.ImageViewer.ChannelResponse.prototype.getSendStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ChannelResponse} returns this
 */
proto.ImageViewer.ChannelResponse.prototype.setSendStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated OneRow image_data = 3;
 * @return {!Array<!proto.ImageViewer.ChannelResponse.OneRow>}
 */
proto.ImageViewer.ChannelResponse.prototype.getImageDataList = function() {
  return /** @type{!Array<!proto.ImageViewer.ChannelResponse.OneRow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ImageViewer.ChannelResponse.OneRow, 3));
};


/**
 * @param {!Array<!proto.ImageViewer.ChannelResponse.OneRow>} value
 * @return {!proto.ImageViewer.ChannelResponse} returns this
*/
proto.ImageViewer.ChannelResponse.prototype.setImageDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ImageViewer.ChannelResponse.OneRow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ImageViewer.ChannelResponse.OneRow}
 */
proto.ImageViewer.ChannelResponse.prototype.addImageData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ImageViewer.ChannelResponse.OneRow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ImageViewer.ChannelResponse} returns this
 */
proto.ImageViewer.ChannelResponse.prototype.clearImageDataList = function() {
  return this.setImageDataList([]);
};


/**
 * optional int32 channel = 4;
 * @return {number}
 */
proto.ImageViewer.ChannelResponse.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ChannelResponse} returns this
 */
proto.ImageViewer.ChannelResponse.prototype.setChannel = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 image_width = 5;
 * @return {number}
 */
proto.ImageViewer.ChannelResponse.prototype.getImageWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ChannelResponse} returns this
 */
proto.ImageViewer.ChannelResponse.prototype.setImageWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 image_height = 6;
 * @return {number}
 */
proto.ImageViewer.ChannelResponse.prototype.getImageHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ChannelResponse} returns this
 */
proto.ImageViewer.ChannelResponse.prototype.setImageHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional float x_rebin_ratio = 7;
 * @return {number}
 */
proto.ImageViewer.ChannelResponse.prototype.getXRebinRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ChannelResponse} returns this
 */
proto.ImageViewer.ChannelResponse.prototype.setXRebinRatio = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float y_rebin_ratio = 8;
 * @return {number}
 */
proto.ImageViewer.ChannelResponse.prototype.getYRebinRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.ChannelResponse} returns this
 */
proto.ImageViewer.ChannelResponse.prototype.setYRebinRatio = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * repeated int64 numbers = 9;
 * @return {!Array<number>}
 */
proto.ImageViewer.ChannelResponse.prototype.getNumbersList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ImageViewer.ChannelResponse} returns this
 */
proto.ImageViewer.ChannelResponse.prototype.setNumbersList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ImageViewer.ChannelResponse} returns this
 */
proto.ImageViewer.ChannelResponse.prototype.addNumbers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ImageViewer.ChannelResponse} returns this
 */
proto.ImageViewer.ChannelResponse.prototype.clearNumbersList = function() {
  return this.setNumbersList([]);
};


/**
 * repeated float bins = 10;
 * @return {!Array<number>}
 */
proto.ImageViewer.ChannelResponse.prototype.getBinsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 10));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ImageViewer.ChannelResponse} returns this
 */
proto.ImageViewer.ChannelResponse.prototype.setBinsList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ImageViewer.ChannelResponse} returns this
 */
proto.ImageViewer.ChannelResponse.prototype.addBins = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ImageViewer.ChannelResponse} returns this
 */
proto.ImageViewer.ChannelResponse.prototype.clearBinsList = function() {
  return this.setBinsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ImageViewer.HistResponse.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ImageViewer.HistResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ImageViewer.HistResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ImageViewer.HistResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.HistResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskStartTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sendStartTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numbersList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    binsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ImageViewer.HistResponse}
 */
proto.ImageViewer.HistResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ImageViewer.HistResponse;
  return proto.ImageViewer.HistResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ImageViewer.HistResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ImageViewer.HistResponse}
 */
proto.ImageViewer.HistResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTaskStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendStartTime(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addNumbers(values[i]);
      }
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBins(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ImageViewer.HistResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ImageViewer.HistResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ImageViewer.HistResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageViewer.HistResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskStartTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSendStartTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getNumbersList();
  if (f.length > 0) {
    writer.writePackedInt64(
      3,
      f
    );
  }
  f = message.getBinsList();
  if (f.length > 0) {
    writer.writePackedFloat(
      4,
      f
    );
  }
};


/**
 * optional int64 task_start_time = 1;
 * @return {number}
 */
proto.ImageViewer.HistResponse.prototype.getTaskStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.HistResponse} returns this
 */
proto.ImageViewer.HistResponse.prototype.setTaskStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 send_start_time = 2;
 * @return {number}
 */
proto.ImageViewer.HistResponse.prototype.getSendStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ImageViewer.HistResponse} returns this
 */
proto.ImageViewer.HistResponse.prototype.setSendStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated int64 numbers = 3;
 * @return {!Array<number>}
 */
proto.ImageViewer.HistResponse.prototype.getNumbersList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ImageViewer.HistResponse} returns this
 */
proto.ImageViewer.HistResponse.prototype.setNumbersList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ImageViewer.HistResponse} returns this
 */
proto.ImageViewer.HistResponse.prototype.addNumbers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ImageViewer.HistResponse} returns this
 */
proto.ImageViewer.HistResponse.prototype.clearNumbersList = function() {
  return this.setNumbersList([]);
};


/**
 * repeated float bins = 4;
 * @return {!Array<number>}
 */
proto.ImageViewer.HistResponse.prototype.getBinsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ImageViewer.HistResponse} returns this
 */
proto.ImageViewer.HistResponse.prototype.setBinsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ImageViewer.HistResponse} returns this
 */
proto.ImageViewer.HistResponse.prototype.addBins = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ImageViewer.HistResponse} returns this
 */
proto.ImageViewer.HistResponse.prototype.clearBinsList = function() {
  return this.setBinsList([]);
};


/**
 * @enum {number}
 */
proto.ImageViewer.EventType = {
  EMPTY_EVENT: 0,
  INIT_DISPLAY: 1,
  ZOOM: 2,
  PROFILE: 3,
  CHANNEL: 4,
  HIST: 5
};

goog.object.extend(exports, proto.ImageViewer);
